抽象工厂模式(AbstractFactoryPattern)：
	提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。
优点：
	*1.隔离了具体类的生成，使得客户并不需要知道什么被创建。
	*2.当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。
	*3.增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。
缺点：
	*1.在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品。
	*2.开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。

建造者模式(Builder Pattern)：
	将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
优点：
	*1.在建造者模式中，客户端不必知道产品内部组成的细节。
	*2.每一个具体建造者都相对独立，而与其他的具体建造者无关。
	*3.可以更加精细地控制产品的创建过程。
	*4.增加新的具体建造者无须修改原有类库的代码。
缺点：
	*1.如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。
	*2.如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。
	
建造者模式与抽象工厂模式的比较：
	1.与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。
	2.在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。

	3.如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。  


